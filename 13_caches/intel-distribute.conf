# filepaths from other chapters included but commented for convenience

# bin/logstash -f conf.d/intel-distribute.conf --config.test_and_exit
# bin/logstash -f conf.d/intel-distribute.conf --config.reload.automatic

# comments included if you skipped making the bookproject directories

input {
	# accept Elastic Agent input with mTLS (also works for Beats senders)
	elastic_agent {
		port => 5044
		type => "external_ioc"
		ssl_enabled => true
		ssl_client_authentication => "required"
		#ssl_certificate => "/etc/logstash/certs/wildcard.local.flex.cert.pem"
		#ssl_key => "/etc/logstash/certs/wildcard.local.flex.key.pem"
		ssl_certificate => "/etc/ssl/bookproject/wildcard.local.flex.cert.pem"
		ssl_key => "/etc/ssl/bookproject/wildcard.local.flex.key.pem"
		ssl_key_passphrase => "abcd1234"
		ssl_certificate_authorities => [ "/etc/ssl/bookproject/ca-chain.cert.pem" ]
	}
	# custom IOC uploads
	http {
		port => 8080
		type => "custom_ioc"
		ssl_enabled => true
		ssl_client_authentication => "required"
		#ssl_certificate => "/etc/logstash/certs/wildcard.local.flex.cert.pem"
		#ssl_key => "/etc/logstash/certs/wildcard.local.flex.key.pem"
		ssl_certificate => "/etc/ssl/bookproject/wildcard.local.flex.cert.pem"
		ssl_key => "/etc/ssl/bookproject/wildcard.local.flex.key.pem"
		ssl_key_passphrase => "abcd1234"
		#ssl_certificate_authorities => [ "/etc/logstash/certs/ca-chain.cert.pem" ]
		ssl_certificate_authorities => [ "/etc/ssl/bookproject/ca-chain.cert.pem" ]
	}
}

# only perform these actions on threatintel data
filter {
	if [agent][type] == "filebeat" and [service][type] == "threatintel" {
		# parse message (a JSON string) into labels.* fields
		json {
			source => "[message]"
			target => "[labels]"
			skip_on_invalid_json => true
		}
		# extract domains from full URL indicators
		ruby {
			id => "ruby_extract_domain"
			init => '
				require "uri"
			'
			code => '
				if event.get("[labels][url]")
					fullurl = event.get("[labels][url]").downcase
					parsed = URI(fullurl)
					event.set("[labels][url_domain]", parsed.host.downcase)
				end
			'
		}
		# based on available fields, build the string to be stored as the cache value for any given indicator
		if [event][dataset] {
			mutate {
				add_field => { "[labels][cti_message]" => "%{[event][dataset]}" }
			}
		} else {
			mutate {
				add_field => { "[labels][cti_message]" => "threatintel" }
			}
		}
		if [labels][signature] {
			mutate {
				update => { "[labels][cti_message]" => "%{[labels][cti_message]}-%{[labels][signature]}" }
			}
		}
		if [processed][file_type] and [processed][file_type] != "unknown" {
			mutate {
				update => { "[labels][cti_message]" => "%{[labels][cti_message]}-%{[labels][file_type]}" }
			}
		}
	}
}



# only perform these actions on custom indicators uploaded via HTTP PUT or POST
filter {
	if [type] == "custom_ioc" {
		split {}
		#csv { skip_header => true }
		csv {}
		#prune { whitelist_names => [ "@timestamp", "column*" ] }
		# remove header row
		if [column1] == "indicator" and [column2] == "cti_message" { drop {} }
		# remove empty fields
		ruby {
			id => "ruby_remove_nil"
			code => '
				hash = event.to_hash
				hash.each do |k,v|
					if v == nil
						event.remove(k)
					end
				end
			'
		}
		mutate {
			rename => {
				"column1" => "[labels][indicator]"
				"column2" => "[labels][cti_message]"
			}
		}
		# add default values to there is always a key-value pair sent to the cache
		if ![labels][indicator] {
			mutate {
				add_field => { "[labels][indicator]" => "missing" }
			}
		}
		if ![labels][cti_message] {
			mutate {
				add_field => { "[labels][cti_message]" => "threatintel" }
			}
		}
	}
}

output {
	if [labels][cti_message] {
		# display on stdout and send to Elasticsearch
		stdout { codec => rubydebug }
		# store indicators in Elasticsearch
		elasticsearch {
			hosts => [ "https://elasticsearch01.local:9200", "https://elasticsearch02.local:9200", "https://elasticsearch03.local:9200" ]
			# id:api_key
			api_key => "cAT1H5UBebDYjuBuKBXG:LHaHX_N8R9SYjjC4H7k7GA"
			data_stream => true
			ssl_enabled => true
			ssl_certificate_authorities => "/etc/ssl/bookproject/ca-chain.cert.pem"
		}
		#
		# distribute indicators - one host per statement, as "hosts" load balances
		logstash {
			id => "output_to_logstash01"
			hosts => [ "logstash01.local:9800" ]
			ssl_enabled => "true"
			ssl_verification_mode => "full"
			# must use PKCS12 container because using PKCS8 in this output type requires unencrypted keys
			ssl_keystore_path => "/etc/ssl/bookproject/wildcard.local.flex.pkcs12"
			ssl_keystore_password => "abcd1234"
			ssl_certificate_authorities => [ "/etc/ssl/bookproject/ca-chain.cert.pem" ]
		}
		#
		# distribute indicators - one host per statement, as "hosts" load balances
		logstash {
			id => "output_to_logstash02"
			hosts => [ "logstash02.local:9800" ]
			ssl_enabled => "true"
			ssl_verification_mode => "full"
			# must use PKCS12 container because using PKCS8 in this output type requires unencrypted keys
			ssl_keystore_path => "/etc/ssl/bookproject/wildcard.local.flex.pkcs12"
			ssl_keystore_password => "abcd1234"
			ssl_certificate_authorities => [ "/etc/ssl/bookproject/ca-chain.cert.pem" ]
		}
	}
}
