# bin/logstash -f conf.d/memcached-get-indicators.conf --config.test_and_exit
# bin/logstash -f conf.d/memcached-get-indicators.conf --config.reload.automatic


input {
	# accept Elastic Agent input with mTLS
	elastic_agent {
		id => "input_elastic_agent"
		port => 5044
		ssl_enabled => true
		ssl_client_authentication => "required"
		ssl_certificate => "/etc/ssl/bookproject/wildcard.local.flex.cert.pem"
		ssl_key => "/etc/ssl/bookproject/wildcard.local.flex.key.pem"
		ssl_key_passphrase => "abcd1234"
		ssl_certificate_authorities => [ "/etc/ssl/bookproject/ca-chain.cert.pem" ]
	}
}


filter {
	if [file][hash][sha256] {
		memcached {
			get => {
				"%{[file][hash][sha256]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_file.hash.sha256" ]
		}
	}
	if [file][hash][md5] {
		memcached {
			get => {
				"%{[file][hash][md5]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_file.hash.md5" ]
		}
	}
	if [file][hash][imphash] {
		memcached {
			get => {
				"%{[file][hash][imphash]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_file.hash.imphash" ]
		}
	}
	if [url][original] {
		memcached {
			get => {
				"%{[url][original]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_url.original" ]
		}
	}
	if [url][full] {
		memcached {
			get => {
				"%{[url][full]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_url.full" ]
		}
	}
	if [url][domain] {
		memcached {
			get => {
				"%{[url][domain]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_url.domain" ]
		}
	}
	if [destination][domain] {
		memcached {
			get => {
				"%{[destination][domain]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_destination.domain" ]
		}
	}
	if [tls][client][server_name] {
		memcached {
			get => {
				"%{[tls][client][server_name]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_tls.client.server_name" ]
		}
	}
	if [source][ip] {
		memcached {
			get => {
				"%{[source][ip]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_source.ip" ]
		}
	}
	if [destination][ip] {
		memcached {
			get => {
				"%{[destination][ip]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_destination.ip" ]
		}
	}
	#
	# DEV host.name lookup
	if [host][name] {
		memcached {
			get => {
				"%{[host][name]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_host.name" ]
		}
	}
	#
	# DEV agent.name lookup
	if [agent][name] {
		memcached {
			get => {
				"%{[agent][name]}" => "[labels][cti_message]"
			}
			add_tag => [ "cti_match", "cti_agent.name" ]
		}
	}
}


# deduplicate tags
filter {
	ruby {
		id => "ruby_tag_dedup"
		code => '
			if event.get("[tags]")
				event.set("[tags]", event.get("[tags]").uniq)
			end
		'
	}
}


# add the hostname of the logstash server if not present using a loose approximation of an ecs field
filter {
	ruby {
		init => '
			require "socket"
			@@hostname = Socket.gethostname
		'
		code => '
			event.set("[agent][forwarder]", @@hostname)
		'
	}
}


# cleanup
filter {
	mutate {
		remove_tag => [ "beats_input_raw_event" ]
	}
}


# send indicators to Elasticsearch
output {
	# display on stdout and send to Elasticsearch
	#stdout { codec => rubydebug { metadata => true }}
	elasticsearch {
		hosts => [ "https://elasticsearch01.local:9200", "https://elasticsearch02.local:9200", "https://elasticsearch03.local:9200" ]
		# id:api_key
		api_key => "9NZ-UpABT_6d7iApXS9o:WjAd7wp6Tm-I5fyy6DE-bQ"
		data_stream => true
		ssl_enabled => true
		ssl_certificate_authorities => "/etc/ssl/bookproject/ca-chain.cert.pem"
	}
}
