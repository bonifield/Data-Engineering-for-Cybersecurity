# bin/logstash -f conf.d/redis-get-indicators.conf --config.test_and_exit
# bin/logstash -f conf.d/redis-get-indicators.conf --config.reload.automatic
#
# ...logstash/bin/ruby -S gem install redis
# https://github.com/redis/redis-rb

input {
	# accept Elastic Agent and Beats input with mTLS
	elastic_agent {
		port => 5044
		ssl_enabled => true
		ssl_client_authentication => "required"
		ssl_certificate => "/etc/ssl/bookproject/wildcard.local.flex.cert.pem"
		ssl_key => "/etc/ssl/bookproject/wildcard.local.flex.key.pem"
		ssl_key_passphrase => "abcd1234"
		ssl_certificate_authorities => [ "/etc/ssl/bookproject/ca-chain.cert.pem" ]
	}
}

# init runs once when Logstash starts
filter {
	ruby {
		id => "ruby_redis_get"
		init => '
			require "redis"
			redis_socket = "/var/run/redis/redis-server.sock"
			redis_requirepass = "i/+kxEXXLs4ASBtyiFwY0h90pFvVUKGsAiWqw2p5NKPDgxhfFyo1tNTpCMFeVGrIaBY="
			# you CAN make a dedicated connection for each field to check, but test the performance first
			# to see if it's worth using multiple connections, or just one for everything
			$r_sha256 = Redis.new(path: redis_socket, db: 0, password: redis_requirepass)
			$r_md5 = Redis.new(path: redis_socket, db: 0, password: redis_requirepass)
			$r_imphash = Redis.new(path: redis_socket, db: 0, password: redis_requirepass)
			$r_ssdeep = Redis.new(path: redis_socket, db: 0, password: redis_requirepass)
			$r_url = Redis.new(path: redis_socket, db: 0, password: redis_requirepass)
			$r_domain = Redis.new(path: redis_socket, db: 0, password: redis_requirepass)
			$r_sourceip = Redis.new(path: redis_socket, db: 0, password: redis_requirepass)
			$r_destinationip = Redis.new(path: redis_socket, db: 0, password: redis_requirepass)
			# if using a network socket
			#$r = Redis.new(host: "localhost", port: 6379, db: 0, password: redis_requirepass)
		'
		code => '
			# use dedicated Redis connections for each field
			#
			# track cti hits using tags
			arr = ["cti_match"]
			#
			# sha256 hash
			if event.get("[file][hash][sha256]")
				hit = $r_sha256.get(event.get("[file][hash][sha256]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_file.hash.sha256")
				end
			end
			#
			# md5 hash
			if event.get("[file][hash][md5]")
				hit = $r_md5.get(event.get("[file][hash][md5]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_file.hash.md5")
				end
			end
			#
			# import hash
			if event.get("[file][hash][imphash]")
				hit = $r_imphash.get(event.get("[file][hash][imphash]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_file.hash.imphash")
				end
			end
			#
			# ssdeep fuzzy hash
			if event.get("[file][hash][ssdeep]")
				hit = $r_ssdeep.get(event.get("[file][hash][ssdeep]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_file.hash.ssdeep")
				end
			end
			#
			# url - uses url.original
			if event.get("[url][original]")
				hit = $r_url.get(event.get("[url][original]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_url.original")
				end
			end
			#
			# url - uses url.full
			if event.get("[url][full]")
				hit = $r_url.get(event.get("[url][full]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_url.full")
				end
			end
			#
			# domain - uses destination.domain
			if event.get("[destination][domain]")
				hit = $r_domain.get(event.get("[destination][domain]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_destination.domain")
				end
			end
			#
			# domain - uses url.domain
			if event.get("[url][domain]")
				hit = $r_domain.get(event.get("[url][domain]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_url.domain")
				end
			end
			#
			# domain - uses tls.client.server_name
			if event.get("[tls][client][server_name]")
				hit = $r_domain.get(event.get("[tls][client][server_name]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_tls.client.server_name")
				end
			end
			#
			# source IP
			if event.get("[source][ip]")
				hit = $r_sourceip.get(event.get("[source][ip]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_source.ip")
				end
			end
			#
			# destination IP
			if event.get("[destination][ip]")
				hit = $r_destinationip.get(event.get("[destination][ip]").downcase)
				if hit
					event.set("[labels][cti_message]", hit)
					arr.append("cti_destination.ip")
				end
			end
			#
			# check if arr has more than 1 item in it, meaning it has field matches
			if arr.length > 1
				# add arr to tags; create tags first if it does not exist
				if not event.get("[tags]")
					event.set("[tags]", [])
				end
				arr.each do |item|
					event.set("[tags]", event.get("[tags]") << item)
				end
			end
			#
			# TODO - iterate dns.answers_data
		'
	}
}

# deduplicate tags
filter {
	ruby {
		id => "ruby_tag_dedup"
		code => '
			if event.get("[tags]")
				event.set("[tags]", event.get("[tags]").uniq)
			end
		'
	}
}

# add the hostname of the logstash server if not present using a loose approximation of an ecs field
filter {
	ruby {
		id => "ruby_add_agentforwarder"
		init => '
			require "socket"
			@@hostname = Socket.gethostname
		'
		code => '
			event.set("[agent][forwarder]", @@hostname)
		'
	}
}

# send indicators to Elasticsearch
output {
	# display on stdout and send to Elasticsearch
	#stdout { codec => rubydebug { metadata => true }}
	elasticsearch {
		hosts => [ "https://elasticsearch01.local:9200", "https://elasticsearch02.local:9200", "https://elasticsearch03.local:9200" ]
		# id:api_key
		api_key => "cAT1H5UBebDYjuBuKBXG:LHaHX_N8R9SYjjC4H7k7GA"
		data_stream => true
		ssl_enabled => true
		ssl_certificate_authorities => "/etc/ssl/bookproject/ca-chain.cert.pem"
	}
}
