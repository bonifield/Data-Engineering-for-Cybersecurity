# filepaths from other chapters included but commented for convenience

# bin/logstash -f conf.d/redis-set-indicators.conf --config.test_and_exit
# bin/logstash -f conf.d/redis-set-indicators.conf --config.reload.automatic

# Redis gem set() options:
# https://github.com/redis/redis-rb/blob/433ec69c563f1b51dead336fc81f1fb70a8297af/lib/redis/commands/strings.rb#L83
#
# ...logstash/bin/ruby -S gem install redis
# https://github.com/redis/redis-rb
#
# # upload csv
# curl localhost:8080 -T test.csv
# curl https://logstash.local:8080 -T test.csv --cacert /etc/ssl/bookproject/ca-chain.cert.pem --cert /etc/ssl/bookproject/wildcard.local.flex.cert.pem --key /etc/ssl/bookproject/wildcard.local.flex.key.nopass.pem
#	OR without name verification
# curl -k https://logstash.local:8080 -T test.csv --cacert /etc/ssl/bookproject/ca-chain.cert.pem --cert /etc/ssl/bookproject/wildcard.local.flex.cert.pem --key /etc/ssl/bookproject/wildcard.local.flex.key.nopass.pem
#    test.csv contents are at the bottom of this file

input {
	# accept Elastic Agent and Beats input with mTLS
	elastic_agent {
		port => 5044
		type => "external_ioc"
		ssl_enabled => true
		ssl_client_authentication => "required"
		#ssl_certificate => "/etc/logstash/certs/wildcard.local.flex.cert.pem"
		#ssl_key => "/etc/logstash/certs/wildcard.local.flex.key.pem"
		ssl_certificate => "/etc/ssl/bookproject/wildcard.local.flex.cert.pem"
		ssl_key => "/etc/ssl/bookproject/wildcard.local.flex.key.pem"
		ssl_key_passphrase => "abcd1234"
		#ssl_certificate_authorities => [ "/etc/logstash/certs/ca-chain.cert.pem" ]
		ssl_certificate_authorities => [ "/etc/ssl/bookproject/ca-chain.cert.pem" ]
	}
	# custom IOC uploads
	http {
		port => 8080
		type => "custom_ioc"
		ssl_enabled => true
		ssl_client_authentication => "required"
		#ssl_certificate => "/etc/logstash/certs/wildcard.local.flex.cert.pem"
		#ssl_key => "/etc/logstash/certs/wildcard.local.flex.key.pem"
		ssl_certificate => "/etc/ssl/bookproject/wildcard.local.flex.cert.pem"
		ssl_key => "/etc/ssl/bookproject/wildcard.local.flex.key.pem"
		ssl_key_passphrase => "abcd1234"
		#ssl_certificate_authorities => [ "/etc/logstash/certs/ca-chain.cert.pem" ]
		ssl_certificate_authorities => [ "/etc/ssl/bookproject/ca-chain.cert.pem" ]
	}
}

# only perform these actions on threatintel data
filter {
	if [agent][type] == "filebeat" and [service][type] == "threatintel" {
		# parse message (a JSON string) into labels.* fields
		json {
			source => "[message]"
			target => "[labels]"
			skip_on_invalid_json => true
		}
		# based on available fields, build the string to be stored as the cache value for any given indicator
		if [event][dataset] {
			mutate {
				add_field => { "[labels][cti_message]" => "%{[event][dataset]}" }
			}
		} else {
			mutate {
				add_field => { "[labels][cti_message]" => "threatintel" }
			}
		}
		if [labels][signature] {
			mutate {
				update => { "[labels][cti_message]" => "%{[labels][cti_message]}-%{[labels][signature]}" }
			}
		}
		if [processed][file_type] and [processed][file_type] != "unknown" {
			mutate {
				update => { "[labels][cti_message]" => "%{[labels][cti_message]}-%{[labels][file_type]}" }
			}
		}
	}
}

# only perform these actions on custom indicators uploaded via HTTP PUT or POST
filter {
	if [type] == "custom_ioc" {
		split {}
		#csv { skip_header => true }
		csv {}
		#prune { whitelist_names => [ "@timestamp", "column*" ] }
		# remove header row
		if [column1] == "indicator" and [column2] == "cti_message" { drop {} }
		# remove empty fields
		ruby {
			id => "ruby_remove_nil"
			code => '
				hash = event.to_hash
				hash.each do |k,v|
					if v == nil
						event.remove(k)
					end
				end
			'
		}
		mutate {
			rename => {
				"column1" => "[labels][indicator]"
				"column2" => "[labels][cti_message]"
			}
		}
		# add default values to there is always a key-value pair sent to the cache
		if ![labels][indicator] {
			mutate {
				add_field => { "[labels][indicator]" => "missing" }
			}
		}
		if ![labels][cti_message] {
			mutate {
				add_field => { "[labels][cti_message]" => "threatintel" }
			}
		}
	}
}

# init runs once when Logstash starts
filter {
	ruby {
		id => "ruby_redis_set"
		init => '
			require "uri"
			require "redis"
			redis_requirepass = "i/+kxEXXLs4ASBtyiFwY0h90pFvVUKGsAiWqw2p5NKPDgxhfFyo1tNTpCMFeVGrIaBY="
			# unix socket
			$r = Redis.new(path: "/var/run/redis/redis-server.sock", db: 0, password: redis_requirepass)
			# if using a network socket
			#$r = Redis.new(host: "localhost", port: 6379, db: 0, password: redis_requirepass)
			# keys expire after 30 days
			# 60 seconds * 60 minutes * 24 hours * 30 days = 2,592,000 seconds
			@ttl = 2592000
		'
		code => '
			#event.set("[labels][ttl]", @ttl)
			val = event.get("[labels][cti_message]")
			# store sha256
			if event.get("[labels][sha256_hash]")
				$r.set(event.get("[labels][sha256_hash]").downcase, val, ex: @ttl)
			end
			# store md5_hash
			if event.get("[labels][md5_hash]")
				$r.set(event.get("[labels][md5_hash]").downcase, val, ex: @ttl)
			end
			# store imphash
			if event.get("[labels][imphash]")
				$r.set(event.get("[labels][imphash]").downcase, val, ex: @ttl)
			end
			# store ssdeep
			if event.get("[labels][ssdeep]")
				$r.set(event.get("[labels][ssdeep]").downcase, val, ex: @ttl)
			end
			# store full url and domain (host)
			if event.get("[labels][url]")
				$r.set(event.get("[labels][url]").downcase, val, ex: @ttl)
				parsed = URI(event.get("[labels][url]"))
				$r.set(parsed.host.downcase, val, ex: @ttl)
				event.set("[labels][url_domain]", parsed.host.downcase)
			end
			# store ip
			if event.get("[labels][ip]")
				$r.set(event.get("[labels][ip]").downcase, val, ex: @ttl)
			end
			# store custom indicators
			if event.get("[labels][indicator]")
				$r.set(event.get("[labels][indicator]").downcase, val, ex: @ttl)
			end
		'
	}
}

# add the hostname of the logstash server if not present using a loose approximation of an ecs field
filter {
	ruby {
		id => "ruby_add_agentforwarder"
		init => '
			require "socket"
			@hostname = Socket.gethostname
		'
		code => '
			event.set("[agent][forwarder]", @hostname)
		'
	}
}

# send indicators to Elasticsearch
output {
	# display on stdout and send to Elasticsearch
	#stdout { codec => rubydebug { metadata => true }}
	elasticsearch {
		hosts => [ "https://elasticsearch01.local:9200", "https://elasticsearch02.local:9200", "https://elasticsearch03.local:9200" ]
		# id:api_key
		api_key => "cAT1H5UBebDYjuBuKBXG:LHaHX_N8R9SYjjC4H7k7GA"
		data_stream => true
		ssl_enabled => true
		#ssl_certificate_authorities => "/etc/logstash/certs/ca-chain.cert.pem"
		ssl_certificate_authorities => "/etc/ssl/bookproject/ca-chain.cert.pem"
	}
}

# test.csv
#
#"indicator","cti_message"
#"333.333.333.333","bad ip"
#"4444.exe","meterpreter"
#"5.local","bad website"
#"6.local",
#,"only a description"
#1,2,3
