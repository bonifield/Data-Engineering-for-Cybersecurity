# Parsing for RFC5424 "STRUCTURED-DATA"
# https://datatracker.ietf.org/doc/html/rfc5424#section-6.3
#
# bin/logstash -f conf.d/syslog-rfc5424.conf --config.test_and_exit
# bin/logstash -f conf.d/syslog-rfc5424.conf --config.reload.automatic

input {
	# BOM is a non-printable character the describes the message encoding
	generator {
		count => 1
		lines => [
			"<191>2 2024-01-22T18:39:13.005Z ServerOne MyApp 5143 ID23 [mySDID@12345 sip=192.168.8.138 dip=192.168.8.133 sport=38744 dport=443 tport=tcp proto=https] BOMA new host has connected to the server.",
			"<191>2 2024-01-22T18:39:13.005Z ServerTwo MyApp 6744 - [mySDID@12345 sip=192.168.8.138 dip=192.168.8.133 sport=38744 dport=443 tport=tcp proto=https] BOMA new host has connected to the server.",
			"<191>2 2024-01-22T18:39:13.005Z ServerThree MyApp - - BOMA new host has connected to the server."
		]
	}
}

# cleanup prep for demo
filter {
	mutate {
		remove_field => [ "[event][sequence]", "[message]", "[host]", "@version" ]
	}
}

# parsing begins here
filter {
	# delete the non-printable byte order marker, seen here as the placeholder "BOM"
	mutate {
		gsub => [ "[event][original]", "BOM", "" ]
	}
	grok {
		id => "grok_syslog_rfc5424"
		# order from most specific, to least specific
		match => {
			"[event][original]" => [
				"(<%{POSINT:[log][syslog][priority]}>)?(%{NUMBER:[log][syslog][version]} )?%{TIMESTAMP_ISO8601:syslog_timestamp} %{DATA:[host][name]} %{DATA:[process][name]} (%{DATA:[process][pid]}|-)? (%{DATA:[log][syslog][msgid]}|-)? (\[%{DATA:[log][syslog][sdid]} %{GREEDYDATA:[log][syslog][structured_data]}\])?%{GREEDYDATA:[message]}"
			]
		}
	}
	if [log][syslog][priority] {
		syslog_pri {
			use_labels => "true"
			syslog_pri_field_name => "[log][syslog][priority]"
		}
	}
	# strip leading and trailing whitespace; workaround for messages missing the RFC5424-mandated space between tag and message
	mutate {
		strip => [ "[message]" ]
	}
	# use timestamp from syslog message, instead of when Logstash received it
	if [syslog_timestamp] {
		date {
			# specify timezone if not the same as Logstash clusters
			#timezone => "Europe/Madrid"
			match => [ "[syslog_timestamp]", "yyyy-MM-dd HH:mm:ss.SSS Z", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601" ]
		}
	}
	# cleanup
	if [log][syslog][msgid] == "-" {
		mutate { remove_field => [ "[log][syslog][msgid]" ] }
	}
	if [process][pid] == "-" {
		mutate { remove_field => [ "[process][pid]" ] }
	}
}

# parse log.syslog.structured_data
# don't forget to use mutate-convert as necessary
filter {
	kv {
		source => "[log][syslog][structured_data]"
		target => "[parsed]"
	}
	# ECS renames below here
}

output {
	stdout { codec => rubydebug }
}
