# bin/logstash -f conf.d/ruby-simple.conf --config.test_and_exit
# bin/logstash -f conf.d/ruby-simple.conf --config.reload.automatic

input {
	generator {
		count => 1
		add_field => {
			"[host][ip]" => [ "192.168.99.99", "fe80::1234:5678:1a:2bcd" ]
			"[test][ip]" => [ "192.168.99.99", "fe80::1234:5678:1a:2bcd" ]
		}
	}
}

filter {
	# cleanup generator fields so we can focus on what's happening
	#mutate {
	#	remove_field => [ "[event]", "[message]", "[host][name]", "@version", "@timestamp" ]
	#}
	#prune {
	#	whitelist_names => [ "host", "test" ]
	#}
}

# global ($) variables - shared globally; best to avoid
# class (@@) variables - shared by all ruby filters; exercise extreme caution or avoid modifying these
# instance (@) variables - shared between different events in the same ruby filter and all local threads; exercise caution or avoid modifying these

filter {
	ruby {
		id => "ruby_add_agentforwarder"
		# init runs once at startup time
		# init must use global ($), class (@@), or instance (@) variables
		# other ruby functions can access @@ or $ variables which are not thread safe
		# instance variables (@) are thread safe and only exist within their filters
		init => '
			require "socket"
			@@hostname = Socket.gethostname
		'
		# code runs for each event
		code => '
			event.set("[agent][forwarder]", @@hostname)
		'
	}
}

# you can (should) also use checks for intersections, includes, subsets, and supersets
filter {
	ruby {
		id => "ruby_array_comparison"
		code => '
			arr1 = event.get("[host][ip]")
			arr2 = event.get("[test][ip]")
			#arr2 = nil
			#arr1 = [ "192.168.99.99", "fe80::1234:5678:1a:2bcd" ]
			#arr2 = [ "192.168.99.99", "fe80::1234:5678:1a:2bcd" ]
			if arr1 && arr2
			# if !arr1.nil? && !arr2.nil?
				arr1.each do |item1|
				#event.get("[host][ip]").each do |item1|
					#if !arr2.nil?
					arr2.each do |item2|
					#event.get("[test][ip]").each do |item2|
						if item1 == item2
							if event.get("[tags]")
								event.set("[tags]", event.get("[tags]") << "match_"+item1)
							else
								event.set("[tags]", ["match_"+item1])
							end
						end
					end
				end
			end
			if event.get("[tags]")
				event.set("[tags]", event.get("[tags]").uniq)
			end
		'
	}
}

filter {
	ruby {
		id => "ruby_for_loop"
		code => '
			# for-each loop
			event.get("[host][ip]").each do |item|
				if item == "192.168.99.99"
					# tag 10
					event.set("[tags]", event.get("[tags]") << "use Ruby to check array fields to arrays")
				elsif item == "fe80::1234:5678:1a:2bcd"
					# tag 11
					event.set("[tags]", event.get("[tags]") << "use Ruby to iterate over all items in an array field")
				end
			end
		'
	}
}

output {
	stdout { codec => rubydebug { metadata => "true" }}
}
