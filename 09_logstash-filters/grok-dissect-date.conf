# bin/logstash -f conf.d/grok-dissect-date.conf --config.test_and_exit
# bin/logstash -f conf.d/grok-dissect-date.conf --config.reload.automatic

input {
	generator {
		count => 1
		lines => [
			"<191>Jan 19 17:22:43 ServerThree MyApp[45788]: UDP DNS 192.168.8.138 36728 -> 8.8.8.8 53",
			"Jan 19 17:22:43 ServerThree MyApp[45788]: UDP DNS 192.168.8.138 36728 -> 8.8.8.8 53",
			"Jan 19 17:22:43 ServerThree MyApp: UDP DNS 192.168.8.138 36728 -> 8.8.8.8 53"
		]
	}
}

# cleanup prep for demo
filter {
	mutate {
		remove_field => [ "[event][sequence]", "[message]", "[host]", "@version" ]
	}
}

filter {
	# use grok to parse incoming dynamic messages
	grok {
		id => "grok_syslog"
		# order from most specific, to least specific
		match => {
			"[event][original]" => [
				"(<%{POSINT:[log][syslog][priority]}>)?%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:[host][name]} %{DATA:[process][name]}(\[%{POSINT:[process][pid]}\])?:%{GREEDYDATA:message}"
			]
		}
	}
	# strip leading and trailing whitespace; workaround for messages missing the RFC5424-mandated space between tag and message
	mutate {
		strip => [ "[message]" ]
	}
	# use dissect to parse the static string format, after having whitespace stripped
	dissect {
		id => "dissect_networkinfo"
		mapping => {
			"[message]" => "%{[network][transport]} %{[network][protocol]} %{[source][ip]} %{[source][port]} -> %{[destination][ip]} %{[destination][port]}"
		}
	}
	# use timestamp from syslog message, instead of when Logstash received it
	if [syslog_timestamp] {
		date {
			# specify timezone if not the same as Logstash clusters
			timezone => "Europe/Madrid"
			match => [ "[syslog_timestamp]", "yyyy-MM-dd HH:mm:ss.SSS Z", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601" ]
		}
	}
}

output {
	stdout { codec => rubydebug }
}
